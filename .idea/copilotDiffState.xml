<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/uniqueplant/data/datasource/local/AppDatabaseCallback.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/uniqueplant/data/datasource/local/AppDatabaseCallback.kt" />
              <option name="originalContent" value="package com.app.uniqueplant.data.datasource.local&#10;import androidx.room.RoomDatabase&#10;import androidx.sqlite.db.SupportSQLiteDatabase&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;class AppDatabaseCallback(&#10;    private val database: AppDatabase&#10;) : RoomDatabase.Callback() {&#10;    override fun onCreate(db: SupportSQLiteDatabase) {&#10;        super.onCreate(db)&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            database.personTypeDao().insertDefaultPersonTypes()&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.uniqueplant.data.datasource.local&#10;import androidx.room.RoomDatabase&#10;import androidx.sqlite.db.SupportSQLiteDatabase&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;import javax.inject.Provider&#10;&#10;class AppDatabaseCallback private constructor() : RoomDatabase.Callback() {&#10;    &#10;    private lateinit var database: Provider&lt;AppDatabase&gt;&#10;    &#10;    override fun onCreate(db: SupportSQLiteDatabase) {&#10;        super.onCreate(db)&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            database.get().personTypeDao().insertDefaultPersonTypes()&#10;        }&#10;    }&#10;    &#10;    class Factory @Inject constructor() {&#10;        @Inject&#10;        lateinit var databaseProvider: Provider&lt;AppDatabase&gt;&#10;        &#10;        fun create(): AppDatabaseCallback {&#10;            val callback = AppDatabaseCallback()&#10;            callback.database = databaseProvider&#10;            return callback&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/uniqueplant/di/RoomModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/uniqueplant/di/RoomModule.kt" />
              <option name="originalContent" value="package com.app.uniqueplant.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.app.uniqueplant.data.datasource.local.AppDatabase&#10;import com.app.uniqueplant.data.datasource.local.AppDatabaseCallback&#10;import com.app.uniqueplant.data.datasource.local.dao.CategoryDao&#10;import com.app.uniqueplant.data.datasource.local.dao.ExpenseDao&#10;import com.app.uniqueplant.data.datasource.local.dao.IncomeDao&#10;import com.app.uniqueplant.data.datasource.local.dao.PersonDao&#10;import com.app.uniqueplant.data.datasource.local.dao.PersonTypeDao&#10;import com.app.uniqueplant.data.datasource.local.dao.UserDao&#10;import com.app.uniqueplant.data.datasource.preferences.SharedPreferencesRepository&#10;import com.app.uniqueplant.data.repository.CategoryRepositoryImpl&#10;import com.app.uniqueplant.data.repository.ExpenseRepositoryImpl&#10;import com.app.uniqueplant.data.repository.IncomeRepositoryImpl&#10;import com.app.uniqueplant.data.repository.UserRepositoryImpl&#10;import com.app.uniqueplant.domain.repository.CategoryRepository&#10;import com.app.uniqueplant.domain.repository.ExpenseRepository&#10;import com.app.uniqueplant.domain.repository.IncomeRepository&#10;import com.app.uniqueplant.domain.repository.UserRepository&#10;import com.app.uniqueplant.domain.usecase.expense.AddExpenseUseCase&#10;import com.app.uniqueplant.domain.usecase.income.AddIncomeUseCase&#10;import com.app.uniqueplant.domain.usecase.transaction.AddTransactionUseCase&#10;import com.app.uniqueplant.domain.usecase.categories.GetCategoriesUseCase&#10;import com.app.uniqueplant.domain.usecase.LoadDefaultsUseCase&#10;import com.app.uniqueplant.domain.usecase.analytics.GetMonthlyReportUseCase&#10;import com.app.uniqueplant.domain.usecase.auth.SessionUseCase&#10;import com.app.uniqueplant.domain.usecase.categories.AddCategoryUseCase&#10;import com.app.uniqueplant.domain.usecase.categories.DeleteCategoryUseCase&#10;import com.app.uniqueplant.domain.usecase.categories.UpdateCategoryUseCase&#10;import com.app.uniqueplant.domain.usecase.person.GetAllPersonsUseCase&#10;import com.app.uniqueplant.domain.usecase.transaction.LoadTransactionsUseCase&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object RoomModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {&#10;        return Room&#10;            .databaseBuilder(&#10;                context,&#10;                AppDatabase::class.java,&#10;                &quot;unique-plant-database&quot;&#10;            )&#10;            .fallbackToDestructiveMigration(true)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    fun provideCategoryDao(database: AppDatabase): CategoryDao {&#10;        return database.categoryDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideExpenseDao(database: AppDatabase): ExpenseDao {&#10;        return database.expenseDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideIncomeDao(database: AppDatabase): IncomeDao {&#10;        return database.incomeDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideUserDao(database: AppDatabase): UserDao {&#10;        return database.userDao()&#10;    }&#10;&#10;    @Provides&#10;    fun providePersonDao(database: AppDatabase): PersonDao {&#10;        return database.personDao()&#10;    }&#10;&#10;    @Provides&#10;    fun providePersonTypeDao(database: AppDatabase): PersonTypeDao {&#10;        return database.personTypeDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideCategoryRepository(&#10;        categoryDao: CategoryDao,&#10;        prefRepository: SharedPreferencesRepository&#10;    ): CategoryRepository {&#10;        return CategoryRepositoryImpl(categoryDao)&#10;    }&#10;&#10;    @Provides&#10;    fun provideExpenseRepository(&#10;        expenseDao: ExpenseDao,&#10;    ): ExpenseRepository {&#10;        return ExpenseRepositoryImpl(expenseDao)&#10;    }&#10;&#10;    @Provides&#10;    fun provideIncomeRepository(&#10;        incomeDao: IncomeDao,&#10;    ): IncomeRepository {&#10;        return IncomeRepositoryImpl(incomeDao)&#10;    }&#10;&#10;    @Provides&#10;    fun provideUserRepository(&#10;        userDao: UserDao,&#10;        prefRepository: SharedPreferencesRepository&#10;    ): UserRepository {&#10;        return UserRepositoryImpl(userDao, prefRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideLoadDefaultsUseCase(&#10;        categoryRepository: CategoryRepository,&#10;        preferencesRepository: SharedPreferencesRepository,&#10;        personTypeDao: PersonTypeDao&#10;    ): LoadDefaultsUseCase {&#10;        return LoadDefaultsUseCase(categoryRepository, preferencesRepository, personTypeDao)&#10;    }&#10;&#10;    @Provides&#10;    fun provideLoadTransactionsUseCase(&#10;        incomeRepository: IncomeRepository,&#10;        expenseRepository: ExpenseRepository&#10;    ): LoadTransactionsUseCase {&#10;        return LoadTransactionsUseCase(incomeRepository, expenseRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideGetCategoriesUseCase(&#10;        categoryRepository: CategoryRepository&#10;    ): GetCategoriesUseCase {&#10;        return GetCategoriesUseCase(categoryRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideAddIncomeUseCase(&#10;        sessionUseCase: SessionUseCase,&#10;        incomeRepository: IncomeRepository&#10;    ): AddIncomeUseCase {&#10;        return AddIncomeUseCase(sessionUseCase, incomeRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideAddExpenseUseCase(&#10;        sessionUseCase: SessionUseCase,&#10;        expenseRepository: ExpenseRepository&#10;    ): AddExpenseUseCase {&#10;        return AddExpenseUseCase(sessionUseCase, expenseRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun getMonthlyReportUseCase(&#10;        incomesRepository: IncomeRepository,&#10;        expensesRepository: ExpenseRepository,&#10;        categoryRepository: CategoryRepository&#10;    ): GetMonthlyReportUseCase {&#10;        return GetMonthlyReportUseCase(&#10;            incomesRepository, expensesRepository, categoryRepository&#10;        )&#10;    }&#10;&#10;    @Provides&#10;    fun provideAddTransactionUseCase(&#10;        sessionUseCase: SessionUseCase,&#10;        incomeRepository: IncomeRepository,&#10;        expenseRepository: ExpenseRepository,&#10;        categoriesUseCase: GetCategoriesUseCase&#10;    ): AddTransactionUseCase {&#10;        return AddTransactionUseCase(&#10;            sessionUseCase, incomeRepository, expenseRepository, categoriesUseCase&#10;        )&#10;    }&#10;&#10;    @Provides&#10;    fun provideUpdateCategoryUseCase(&#10;        categoryRepository: CategoryRepository&#10;    ): UpdateCategoryUseCase {&#10;        return UpdateCategoryUseCase(categoryRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideDeleteCategoryUseCase(&#10;        categoryRepository: CategoryRepository&#10;    ): DeleteCategoryUseCase {&#10;        return DeleteCategoryUseCase(categoryRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideAddCategoryUseCase(&#10;        categoryRepository: CategoryRepository&#10;    ): AddCategoryUseCase {&#10;        return AddCategoryUseCase(categoryRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideGetAllPersonsUseCase(&#10;        personDao: PersonDao&#10;    ): GetAllPersonsUseCase {&#10;        return GetAllPersonsUseCase(personDao)&#10;    }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.app.uniqueplant.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.app.uniqueplant.data.datasource.local.AppDatabase&#10;import com.app.uniqueplant.data.datasource.local.AppDatabaseCallback&#10;import com.app.uniqueplant.data.datasource.local.dao.CategoryDao&#10;import com.app.uniqueplant.data.datasource.local.dao.ExpenseDao&#10;import com.app.uniqueplant.data.datasource.local.dao.IncomeDao&#10;import com.app.uniqueplant.data.datasource.local.dao.PersonDao&#10;import com.app.uniqueplant.data.datasource.local.dao.PersonTypeDao&#10;import com.app.uniqueplant.data.datasource.local.dao.UserDao&#10;import com.app.uniqueplant.data.datasource.preferences.SharedPreferencesRepository&#10;import com.app.uniqueplant.data.repository.CategoryRepositoryImpl&#10;import com.app.uniqueplant.data.repository.ExpenseRepositoryImpl&#10;import com.app.uniqueplant.data.repository.IncomeRepositoryImpl&#10;import com.app.uniqueplant.data.repository.UserRepositoryImpl&#10;import com.app.uniqueplant.domain.repository.CategoryRepository&#10;import com.app.uniqueplant.domain.repository.ExpenseRepository&#10;import com.app.uniqueplant.domain.repository.IncomeRepository&#10;import com.app.uniqueplant.domain.repository.UserRepository&#10;import com.app.uniqueplant.domain.usecase.expense.AddExpenseUseCase&#10;import com.app.uniqueplant.domain.usecase.income.AddIncomeUseCase&#10;import com.app.uniqueplant.domain.usecase.transaction.AddTransactionUseCase&#10;import com.app.uniqueplant.domain.usecase.categories.GetCategoriesUseCase&#10;import com.app.uniqueplant.domain.usecase.LoadDefaultsUseCase&#10;import com.app.uniqueplant.domain.usecase.analytics.GetMonthlyReportUseCase&#10;import com.app.uniqueplant.domain.usecase.auth.SessionUseCase&#10;import com.app.uniqueplant.domain.usecase.categories.AddCategoryUseCase&#10;import com.app.uniqueplant.domain.usecase.categories.DeleteCategoryUseCase&#10;import com.app.uniqueplant.domain.usecase.categories.UpdateCategoryUseCase&#10;import com.app.uniqueplant.domain.usecase.person.GetAllPersonsUseCase&#10;import com.app.uniqueplant.domain.usecase.transaction.LoadTransactionsUseCase&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object RoomModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAppDatabaseCallback(): AppDatabaseCallback.Factory {&#10;        return AppDatabaseCallback.Factory()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAppDatabase(&#10;        @ApplicationContext context: Context,&#10;        callbackFactory: AppDatabaseCallback.Factory&#10;    ): AppDatabase {&#10;        return Room&#10;            .databaseBuilder(&#10;                context,&#10;                AppDatabase::class.java,&#10;                &quot;unique-plant-database&quot;&#10;            )&#10;            .fallbackToDestructiveMigration()&#10;            .addCallback(callbackFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    fun provideCategoryDao(database: AppDatabase): CategoryDao {&#10;        return database.categoryDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideExpenseDao(database: AppDatabase): ExpenseDao {&#10;        return database.expenseDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideIncomeDao(database: AppDatabase): IncomeDao {&#10;        return database.incomeDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideUserDao(database: AppDatabase): UserDao {&#10;        return database.userDao()&#10;    }&#10;&#10;    @Provides&#10;    fun providePersonDao(database: AppDatabase): PersonDao {&#10;        return database.personDao()&#10;    }&#10;&#10;    @Provides&#10;    fun providePersonTypeDao(database: AppDatabase): PersonTypeDao {&#10;        return database.personTypeDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideCategoryRepository(&#10;        categoryDao: CategoryDao,&#10;        prefRepository: SharedPreferencesRepository&#10;    ): CategoryRepository {&#10;        return CategoryRepositoryImpl(categoryDao)&#10;    }&#10;&#10;    @Provides&#10;    fun provideExpenseRepository(&#10;        expenseDao: ExpenseDao,&#10;    ): ExpenseRepository {&#10;        return ExpenseRepositoryImpl(expenseDao)&#10;    }&#10;&#10;    @Provides&#10;    fun provideIncomeRepository(&#10;        incomeDao: IncomeDao,&#10;    ): IncomeRepository {&#10;        return IncomeRepositoryImpl(incomeDao)&#10;    }&#10;&#10;    @Provides&#10;    fun provideUserRepository(&#10;        userDao: UserDao,&#10;        prefRepository: SharedPreferencesRepository&#10;    ): UserRepository {&#10;        return UserRepositoryImpl(userDao, prefRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideLoadDefaultsUseCase(&#10;        categoryRepository: CategoryRepository,&#10;        preferencesRepository: SharedPreferencesRepository,&#10;        personTypeDao: PersonTypeDao&#10;    ): LoadDefaultsUseCase {&#10;        return LoadDefaultsUseCase(categoryRepository, preferencesRepository, personTypeDao)&#10;    }&#10;&#10;    @Provides&#10;    fun provideLoadTransactionsUseCase(&#10;        incomeRepository: IncomeRepository,&#10;        expenseRepository: ExpenseRepository&#10;    ): LoadTransactionsUseCase {&#10;        return LoadTransactionsUseCase(incomeRepository, expenseRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideGetCategoriesUseCase(&#10;        categoryRepository: CategoryRepository&#10;    ): GetCategoriesUseCase {&#10;        return GetCategoriesUseCase(categoryRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideAddIncomeUseCase(&#10;        sessionUseCase: SessionUseCase,&#10;        incomeRepository: IncomeRepository&#10;    ): AddIncomeUseCase {&#10;        return AddIncomeUseCase(sessionUseCase, incomeRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideAddExpenseUseCase(&#10;        sessionUseCase: SessionUseCase,&#10;        expenseRepository: ExpenseRepository&#10;    ): AddExpenseUseCase {&#10;        return AddExpenseUseCase(sessionUseCase, expenseRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun getMonthlyReportUseCase(&#10;        incomesRepository: IncomeRepository,&#10;        expensesRepository: ExpenseRepository,&#10;        categoryRepository: CategoryRepository&#10;    ): GetMonthlyReportUseCase {&#10;        return GetMonthlyReportUseCase(&#10;            incomesRepository, expensesRepository, categoryRepository&#10;        )&#10;    }&#10;&#10;    @Provides&#10;    fun provideAddTransactionUseCase(&#10;        sessionUseCase: SessionUseCase,&#10;        incomeRepository: IncomeRepository,&#10;        expenseRepository: ExpenseRepository,&#10;        categoriesUseCase: GetCategoriesUseCase&#10;    ): AddTransactionUseCase {&#10;        return AddTransactionUseCase(&#10;            sessionUseCase, incomeRepository, expenseRepository, categoriesUseCase&#10;        )&#10;    }&#10;&#10;    @Provides&#10;    fun provideUpdateCategoryUseCase(&#10;        categoryRepository: CategoryRepository&#10;    ): UpdateCategoryUseCase {&#10;        return UpdateCategoryUseCase(categoryRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideDeleteCategoryUseCase(&#10;        categoryRepository: CategoryRepository&#10;    ): DeleteCategoryUseCase {&#10;        return DeleteCategoryUseCase(categoryRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideAddCategoryUseCase(&#10;        categoryRepository: CategoryRepository&#10;    ): AddCategoryUseCase {&#10;        return AddCategoryUseCase(categoryRepository)&#10;    }&#10;&#10;    @Provides&#10;    fun provideGetAllPersonsUseCase(&#10;        personDao: PersonDao&#10;    ): GetAllPersonsUseCase {&#10;        return GetAllPersonsUseCase(personDao)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>